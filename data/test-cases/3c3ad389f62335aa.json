{"uid":"3c3ad389f62335aa","name":"T28: Create a task with an invalid time.","fullName":"tests.test_task_management.TestTaskManagement#test_create_task_with_invalid_time","historyId":"e787cd589deccac9edeb1e7e970ae02c","time":{"start":1737378297199,"stop":1737378297710,"duration":511},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 201. Response: {'title': 'Three very.', 'start': 'fall', 'end': 'collection', 'priority': 'medium', 'category': 'done', 'owner': '678e49f96eb12444f2b4682e', 'date': '2025-01-05T00:00:00.000Z', '_id': '678e49f96eb12444f2b46832', 'createdAt': '2025-01-20T13:04:57.970Z', 'updatedAt': '2025-01-20T13:04:57.970Z', '__v': 0}","statusTrace":"self = <test_task_management.TestTaskManagement object at 0x000001D25B4F7770>\n\n    @pytest.mark.order(28)\n    @allure.title(\"T28: Create a task with an invalid time.\")\n    def test_create_task_with_invalid_time(self):\n        user = self.api_user_auth.create_user()\n>       self.api_task.create_task_with_invalid_time(Token=user.data.accessToken)\n\ntests\\test_task_management.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices\\Task\\api_task.py:100: in create_task_with_invalid_time\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x000001D25B6FD8E0>, response = <Response [201]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 201. Response: {'title': 'Three very.', 'start': 'fall', 'end': 'collection', 'priority': 'medium', 'category': 'done', 'owner': '678e49f96eb12444f2b4682e', 'date': '2025-01-05T00:00:00.000Z', '_id': '678e49f96eb12444f2b46832', 'createdAt': '2025-01-20T13:04:57.970Z', 'updatedAt': '2025-01-20T13:04:57.970Z', '__v': 0}\n\nutils\\helper.py:13: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1737378287248,"stop":1737378287249,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_xunit_setup_method_fixture_TestTaskManagement","time":{"start":1737378297198,"stop":1737378297198,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 201. Response: {'title': 'Three very.', 'start': 'fall', 'end': 'collection', 'priority': 'medium', 'category': 'done', 'owner': '678e49f96eb12444f2b4682e', 'date': '2025-01-05T00:00:00.000Z', '_id': '678e49f96eb12444f2b46832', 'createdAt': '2025-01-20T13:04:57.970Z', 'updatedAt': '2025-01-20T13:04:57.970Z', '__v': 0}","statusTrace":"self = <test_task_management.TestTaskManagement object at 0x000001D25B4F7770>\n\n    @pytest.mark.order(28)\n    @allure.title(\"T28: Create a task with an invalid time.\")\n    def test_create_task_with_invalid_time(self):\n        user = self.api_user_auth.create_user()\n>       self.api_task.create_task_with_invalid_time(Token=user.data.accessToken)\n\ntests\\test_task_management.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices\\Task\\api_task.py:100: in create_task_with_invalid_time\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x000001D25B6FD8E0>, response = <Response [201]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 201. Response: {'title': 'Three very.', 'start': 'fall', 'end': 'collection', 'priority': 'medium', 'category': 'done', 'owner': '678e49f96eb12444f2b4682e', 'date': '2025-01-05T00:00:00.000Z', '_id': '678e49f96eb12444f2b46832', 'createdAt': '2025-01-20T13:04:57.970Z', 'updatedAt': '2025-01-20T13:04:57.970Z', '__v': 0}\n\nutils\\helper.py:13: AssertionError","steps":[{"name":"Create a new user.","time":{"start":1737378297199,"stop":1737378297510,"duration":311},"status":"passed","steps":[],"attachments":[{"uid":"57bc17abdb8f9e34","name":"API Response","source":"57bc17abdb8f9e34.json","type":"application/json","size":523}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Create a task with an invalid time.","time":{"start":1737378297511,"stop":1737378297709,"duration":198},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 201. Response: {'title': 'Three very.', 'start': 'fall', 'end': 'collection', 'priority': 'medium', 'category': 'done', 'owner': '678e49f96eb12444f2b4682e', 'date': '2025-01-05T00:00:00.000Z', '_id': '678e49f96eb12444f2b46832', 'createdAt': '2025-01-20T13:04:57.970Z', 'updatedAt': '2025-01-20T13:04:57.970Z', '__v': 0}\n","statusTrace":"  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\services\\Task\\api_task.py\", line 100, in create_task_with_invalid_time\n    self.assert_status(response, 400)\n  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\utils\\helper.py\", line 13, in assert_status\n    assert response.status_code == expected_status, \\\n","steps":[],"attachments":[],"parameters":[{"name":"Token","value":"'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OGU0OWY5NmViMTI0NDRmMmI0NjgyZSIsImlhdCI6MTczNzM3ODI5NywiZXhwIjoxNzM3MzgxODk3fQ.uwJJEv7i9JoWGAZ7RsfNscJFzmQSkKmM18a7GBCF3g4'"}],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"_xunit_setup_method_fixture_TestTaskManagement::0","time":{"start":1737378297721,"stop":1737378297721,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Task Management"},{"name":"tag","value":"order(28)"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_task_management"},{"name":"subSuite","value":"TestTaskManagement"},{"name":"host","value":"DESKTOP-0R2QBDF"},{"name":"thread","value":"848-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_task_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["order(28)"]},"source":"3c3ad389f62335aa.json","parameterValues":[]}