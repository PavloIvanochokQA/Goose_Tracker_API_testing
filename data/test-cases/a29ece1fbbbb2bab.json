{
  "uid" : "a29ece1fbbbb2bab",
  "name" : "T26: Create a task with an invalid category.",
  "fullName" : "tests.test_task_management.TestTaskManagement#test_create_task_with_invalid_category",
  "historyId" : "ba4ced2f072283705a5e9cd8b97e672f",
  "time" : {
    "start" : 1737457630882,
    "stop" : 1737457631261,
    "duration" : 379
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected status code 201, but got 409. Response: {'success': False, 'message': 'User with email sean05@example.com already exist'}",
  "statusTrace" : "self = <test_task_management.TestTaskManagement object at 0x7f83677654d0>\n\n    @pytest.mark.order(26)\n    @allure.title(\"T26: Create a task with an invalid category.\")\n    def test_create_task_with_invalid_category(self):\n>       user = self.api_user_auth.create_user()\n\ntests/test_task_management.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices/UserAuth/api_user_auth.py:29: in create_user\n    self.assert_status(response, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.UserAuth.api_user_auth.UserAuthAPI object at 0x7f8367e26890>\nresponse = <Response [409]>, expected_status = 201\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 201, but got 409. Response: {'success': False, 'message': 'User with email sean05@example.com already exist'}\n\nutils/helper.py:13: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestTaskManagement",
    "time" : {
      "start" : 1737457630882,
      "stop" : 1737457630882,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1737457612203,
      "stop" : 1737457612205,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected status code 201, but got 409. Response: {'success': False, 'message': 'User with email sean05@example.com already exist'}",
    "statusTrace" : "self = <test_task_management.TestTaskManagement object at 0x7f83677654d0>\n\n    @pytest.mark.order(26)\n    @allure.title(\"T26: Create a task with an invalid category.\")\n    def test_create_task_with_invalid_category(self):\n>       user = self.api_user_auth.create_user()\n\ntests/test_task_management.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices/UserAuth/api_user_auth.py:29: in create_user\n    self.assert_status(response, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.UserAuth.api_user_auth.UserAuthAPI object at 0x7f8367e26890>\nresponse = <Response [409]>, expected_status = 201\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 201, but got 409. Response: {'success': False, 'message': 'User with email sean05@example.com already exist'}\n\nutils/helper.py:13: AssertionError",
    "steps" : [ {
      "name" : "Create a new user.",
      "time" : {
        "start" : 1737457630882,
        "stop" : 1737457631261,
        "duration" : 379
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expected status code 201, but got 409. Response: {'success': False, 'message': 'User with email sean05@example.com already exist'}\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/services/UserAuth/api_user_auth.py\", line 29, in create_user\n    self.assert_status(response, 201)\n  File \"/usr/workspace/utils/helper.py\", line 13, in assert_status\n    assert response.status_code == expected_status, \\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestTaskManagement::0",
    "time" : {
      "start" : 1737457631268,
      "stop" : 1737457631268,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Task Management"
  }, {
    "name" : "tag",
    "value" : "order(26)"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_task_management"
  }, {
    "name" : "subSuite",
    "value" : "TestTaskManagement"
  }, {
    "name" : "host",
    "value" : "1f5fb87e8191"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_task_management"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "af7c5cc5e461394f",
        "status" : "passed",
        "time" : {
          "start" : 1737381753305,
          "stop" : 1737381754140,
          "duration" : 835
        }
      }, {
        "uid" : "4e39a1b554a6486b",
        "status" : "passed",
        "time" : {
          "start" : 1737378993305,
          "stop" : 1737378994401,
          "duration" : 1096
        }
      }, {
        "uid" : "548669912fe2b777",
        "status" : "passed",
        "time" : {
          "start" : 1737378296243,
          "stop" : 1737378296714,
          "duration" : 471
        }
      } ]
    },
    "tags" : [ "order(26)" ]
  },
  "source" : "a29ece1fbbbb2bab.json",
  "parameterValues" : [ ]
}