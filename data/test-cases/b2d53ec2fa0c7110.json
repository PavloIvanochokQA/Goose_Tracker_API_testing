{"uid":"b2d53ec2fa0c7110","name":"T31: Update an existing task with an empty title.","fullName":"tests.test_task_management.TestTaskManagement#test_update_task_with_empty_title","historyId":"ec18b5ff360722f7c95ce0e94dcc433a","time":{"start":1737378298904,"stop":1737378299596,"duration":692},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fb6eb12444f2b46848', 'title': '', 'start': '05:56:39', 'end': '08:19:35', 'priority': 'medium', 'category': 'done', 'owner': '678e49fb6eb12444f2b46844', 'date': '2025-01-11T00:00:00.000Z', 'createdAt': '2025-01-20T13:04:59.683Z', 'updatedAt': '2025-01-20T13:04:59.868Z', '__v': 0}}","statusTrace":"self = <test_task_management.TestTaskManagement object at 0x000001D25B465730>\n\n    @pytest.mark.order(31)\n    @allure.title(\"T31: Update an existing task with an empty title.\")\n    def test_update_task_with_empty_title(self):\n        user = self.api_user_auth.create_user()\n        task = self.api_task.create_task(Token=user.data.accessToken)\n>       self.api_task.update_task_with_empty_title(Token=user.data.accessToken, task_id=task.id)\n\ntests\\test_task_management.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices\\Task\\api_task.py:136: in update_task_with_empty_title\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x000001D25B6FD5E0>, response = <Response [200]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fb6eb12444f2b46848', 'title': '', 'start': '05:56:39', 'end': '08:19:35', 'priority': 'medium', 'category': 'done', 'owner': '678e49fb6eb12444f2b46844', 'date': '2025-01-11T00:00:00.000Z', 'createdAt': '2025-01-20T13:04:59.683Z', 'updatedAt': '2025-01-20T13:04:59.868Z', '__v': 0}}\n\nutils\\helper.py:13: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1737378287248,"stop":1737378287249,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_xunit_setup_method_fixture_TestTaskManagement","time":{"start":1737378298904,"stop":1737378298904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fb6eb12444f2b46848', 'title': '', 'start': '05:56:39', 'end': '08:19:35', 'priority': 'medium', 'category': 'done', 'owner': '678e49fb6eb12444f2b46844', 'date': '2025-01-11T00:00:00.000Z', 'createdAt': '2025-01-20T13:04:59.683Z', 'updatedAt': '2025-01-20T13:04:59.868Z', '__v': 0}}","statusTrace":"self = <test_task_management.TestTaskManagement object at 0x000001D25B465730>\n\n    @pytest.mark.order(31)\n    @allure.title(\"T31: Update an existing task with an empty title.\")\n    def test_update_task_with_empty_title(self):\n        user = self.api_user_auth.create_user()\n        task = self.api_task.create_task(Token=user.data.accessToken)\n>       self.api_task.update_task_with_empty_title(Token=user.data.accessToken, task_id=task.id)\n\ntests\\test_task_management.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices\\Task\\api_task.py:136: in update_task_with_empty_title\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x000001D25B6FD5E0>, response = <Response [200]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fb6eb12444f2b46848', 'title': '', 'start': '05:56:39', 'end': '08:19:35', 'priority': 'medium', 'category': 'done', 'owner': '678e49fb6eb12444f2b46844', 'date': '2025-01-11T00:00:00.000Z', 'createdAt': '2025-01-20T13:04:59.683Z', 'updatedAt': '2025-01-20T13:04:59.868Z', '__v': 0}}\n\nutils\\helper.py:13: AssertionError","steps":[{"name":"Create a new user.","time":{"start":1737378298904,"stop":1737378299220,"duration":316},"status":"passed","steps":[],"attachments":[{"uid":"23e22d8b69faef23","name":"API Response","source":"23e22d8b69faef23.json","type":"application/json","size":522}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Create a new task.","time":{"start":1737378299221,"stop":1737378299410,"duration":189},"status":"passed","steps":[],"attachments":[{"uid":"f3443e51ad85fbfa","name":"API Response","source":"f3443e51ad85fbfa.json","type":"application/json","size":355}],"parameters":[{"name":"Token","value":"'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OGU0OWZiNmViMTI0NDRmMmI0Njg0NCIsImlhdCI6MTczNzM3ODI5OSwiZXhwIjoxNzM3MzgxODk5fQ.jEtsm0EV7J_yVubTiz5oVaNpncoMD4UZvyDdJfU_agk'"}],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Update an existing task with an empty title.","time":{"start":1737378299410,"stop":1737378299595,"duration":185},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fb6eb12444f2b46848', 'title': '', 'start': '05:56:39', 'end': '08:19:35', 'priority': 'medium', 'category': 'done', 'owner': '678e49fb6eb12444f2b46844', 'date': '2025-01-11T00:00:00.000Z', 'createdAt': '2025-01-20T13:04:59.683Z', 'updatedAt': '2025-01-20T13:04:59.868Z', '__v': 0}}\n","statusTrace":"  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\services\\Task\\api_task.py\", line 136, in update_task_with_empty_title\n    self.assert_status(response, 400)\n  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\utils\\helper.py\", line 13, in assert_status\n    assert response.status_code == expected_status, \\\n","steps":[],"attachments":[],"parameters":[{"name":"Token","value":"'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OGU0OWZiNmViMTI0NDRmMmI0Njg0NCIsImlhdCI6MTczNzM3ODI5OSwiZXhwIjoxNzM3MzgxODk5fQ.jEtsm0EV7J_yVubTiz5oVaNpncoMD4UZvyDdJfU_agk'"},{"name":"task_id","value":"'678e49fb6eb12444f2b46848'"}],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"_xunit_setup_method_fixture_TestTaskManagement::0","time":{"start":1737378299606,"stop":1737378299606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Task Management"},{"name":"tag","value":"order(31)"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_task_management"},{"name":"subSuite","value":"TestTaskManagement"},{"name":"host","value":"DESKTOP-0R2QBDF"},{"name":"thread","value":"848-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_task_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["order(31)"]},"source":"b2d53ec2fa0c7110.json","parameterValues":[]}