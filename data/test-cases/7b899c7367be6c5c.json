{"uid":"7b899c7367be6c5c","name":"T34: Update an existing task with an invalid category.","fullName":"tests.test_task_management.TestTaskManagement#test_update_task_with_invalid_category","historyId":"c7d402871bfa14987044af4b2536ef89","time":{"start":1737378300986,"stop":1737378301656,"duration":670},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fd6eb12444f2b46863', 'title': 'Above moment.', 'start': '05:51:53', 'end': '02:03:04', 'priority': 'low', 'category': 'to', 'owner': '678e49fd6eb12444f2b4685f', 'date': '2025-01-03T00:00:00.000Z', 'createdAt': '2025-01-20T13:05:01.751Z', 'updatedAt': '2025-01-20T13:05:01.929Z', '__v': 0}}","statusTrace":"self = <test_task_management.TestTaskManagement object at 0x000001D25B465C70>\n\n    @pytest.mark.order(34)\n    @allure.title(\"T34: Update an existing task with an invalid category.\")\n    def test_update_task_with_invalid_category(self):\n        user = self.api_user_auth.create_user()\n        task = self.api_task.create_task(Token=user.data.accessToken)\n>       self.api_task.update_task_with_invalid_category(Token=user.data.accessToken, task_id=task.id)\n\ntests\\test_task_management.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices\\Task\\api_task.py:172: in update_task_with_invalid_category\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x000001D25B5EA4E0>, response = <Response [200]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fd6eb12444f2b46863', 'title': 'Above moment.', 'start': '05:51:53', 'end': '02:03:04', 'priority': 'low', 'category': 'to', 'owner': '678e49fd6eb12444f2b4685f', 'date': '2025-01-03T00:00:00.000Z', 'createdAt': '2025-01-20T13:05:01.751Z', 'updatedAt': '2025-01-20T13:05:01.929Z', '__v': 0}}\n\nutils\\helper.py:13: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1737378287248,"stop":1737378287249,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_xunit_setup_method_fixture_TestTaskManagement","time":{"start":1737378300986,"stop":1737378300986,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fd6eb12444f2b46863', 'title': 'Above moment.', 'start': '05:51:53', 'end': '02:03:04', 'priority': 'low', 'category': 'to', 'owner': '678e49fd6eb12444f2b4685f', 'date': '2025-01-03T00:00:00.000Z', 'createdAt': '2025-01-20T13:05:01.751Z', 'updatedAt': '2025-01-20T13:05:01.929Z', '__v': 0}}","statusTrace":"self = <test_task_management.TestTaskManagement object at 0x000001D25B465C70>\n\n    @pytest.mark.order(34)\n    @allure.title(\"T34: Update an existing task with an invalid category.\")\n    def test_update_task_with_invalid_category(self):\n        user = self.api_user_auth.create_user()\n        task = self.api_task.create_task(Token=user.data.accessToken)\n>       self.api_task.update_task_with_invalid_category(Token=user.data.accessToken, task_id=task.id)\n\ntests\\test_task_management.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices\\Task\\api_task.py:172: in update_task_with_invalid_category\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x000001D25B5EA4E0>, response = <Response [200]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fd6eb12444f2b46863', 'title': 'Above moment.', 'start': '05:51:53', 'end': '02:03:04', 'priority': 'low', 'category': 'to', 'owner': '678e49fd6eb12444f2b4685f', 'date': '2025-01-03T00:00:00.000Z', 'createdAt': '2025-01-20T13:05:01.751Z', 'updatedAt': '2025-01-20T13:05:01.929Z', '__v': 0}}\n\nutils\\helper.py:13: AssertionError","steps":[{"name":"Create a new user.","time":{"start":1737378300986,"stop":1737378301298,"duration":312},"status":"passed","steps":[],"attachments":[{"uid":"1ca3772b664b31cb","name":"API Response","source":"1ca3772b664b31cb.json","type":"application/json","size":514}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Create a new task.","time":{"start":1737378301298,"stop":1737378301478,"duration":180},"status":"passed","steps":[],"attachments":[{"uid":"bcbd2d00f29725fa","name":"API Response","source":"bcbd2d00f29725fa.json","type":"application/json","size":359}],"parameters":[{"name":"Token","value":"'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OGU0OWZkNmViMTI0NDRmMmI0Njg1ZiIsImlhdCI6MTczNzM3ODMwMSwiZXhwIjoxNzM3MzgxOTAxfQ.5fXdaASGcFxc9OfUIwEM4Csq-_NOWEkeK7QNNHDcGUY'"}],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Update an existing task with an invalid category.","time":{"start":1737378301478,"stop":1737378301656,"duration":178},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fd6eb12444f2b46863', 'title': 'Above moment.', 'start': '05:51:53', 'end': '02:03:04', 'priority': 'low', 'category': 'to', 'owner': '678e49fd6eb12444f2b4685f', 'date': '2025-01-03T00:00:00.000Z', 'createdAt': '2025-01-20T13:05:01.751Z', 'updatedAt': '2025-01-20T13:05:01.929Z', '__v': 0}}\n","statusTrace":"  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\services\\Task\\api_task.py\", line 172, in update_task_with_invalid_category\n    self.assert_status(response, 400)\n  File \"C:\\Users\\Pavlo\\Desktop\\Goose_Tracker_API_testing\\utils\\helper.py\", line 13, in assert_status\n    assert response.status_code == expected_status, \\\n","steps":[],"attachments":[],"parameters":[{"name":"Token","value":"'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OGU0OWZkNmViMTI0NDRmMmI0Njg1ZiIsImlhdCI6MTczNzM3ODMwMSwiZXhwIjoxNzM3MzgxOTAxfQ.5fXdaASGcFxc9OfUIwEM4Csq-_NOWEkeK7QNNHDcGUY'"},{"name":"task_id","value":"'678e49fd6eb12444f2b46863'"}],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"_xunit_setup_method_fixture_TestTaskManagement::0","time":{"start":1737378301667,"stop":1737378301667,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Task Management"},{"name":"tag","value":"order(34)"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_task_management"},{"name":"subSuite","value":"TestTaskManagement"},{"name":"host","value":"DESKTOP-0R2QBDF"},{"name":"thread","value":"848-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_task_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["order(34)"]},"source":"7b899c7367be6c5c.json","parameterValues":[]}