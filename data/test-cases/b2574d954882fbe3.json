{
  "uid" : "b2574d954882fbe3",
  "name" : "T31: Update an existing task with an empty title.",
  "fullName" : "tests.test_task_management.TestTaskManagement#test_update_task_with_empty_title",
  "historyId" : "ec18b5ff360722f7c95ce0e94dcc433a",
  "time" : {
    "start" : 1737457635401,
    "stop" : 1737457636738,
    "duration" : 1337
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678f7fe46eb12444f2b46abe', 'title': '', 'start': '01:16:27', 'end': '07:56:33', 'priority': 'medium', 'category': 'in-progress', 'owner': '678f7fe36eb12444f2b46aba', 'date': '2025-01-10T00:00:00.000Z', 'createdAt': '2025-01-21T11:07:16.252Z', 'updatedAt': '2025-01-21T11:07:16.655Z', '__v': 0}}",
  "statusTrace" : "self = <test_task_management.TestTaskManagement object at 0x7f8367838e10>\n\n    @pytest.mark.order(31)\n    @allure.title(\"T31: Update an existing task with an empty title.\")\n    def test_update_task_with_empty_title(self):\n        user = self.api_user_auth.create_user()\n        task = self.api_task.create_task(Token=user.data.accessToken)\n>       self.api_task.update_task_with_empty_title(Token=user.data.accessToken, task_id=task.id)\n\ntests/test_task_management.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices/Task/api_task.py:136: in update_task_with_empty_title\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x7f83662b4650>\nresponse = <Response [200]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678f7fe46eb12444f2b46abe', 'title': '', 'start': '01:16:27', 'end': '07:56:33', 'priority': 'medium', 'category': 'in-progress', 'owner': '678f7fe36eb12444f2b46aba', 'date': '2025-01-10T00:00:00.000Z', 'createdAt': '2025-01-21T11:07:16.252Z', 'updatedAt': '2025-01-21T11:07:16.655Z', '__v': 0}}\n\nutils/helper.py:13: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestTaskManagement",
    "time" : {
      "start" : 1737457635401,
      "stop" : 1737457635401,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1737457612203,
      "stop" : 1737457612205,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678f7fe46eb12444f2b46abe', 'title': '', 'start': '01:16:27', 'end': '07:56:33', 'priority': 'medium', 'category': 'in-progress', 'owner': '678f7fe36eb12444f2b46aba', 'date': '2025-01-10T00:00:00.000Z', 'createdAt': '2025-01-21T11:07:16.252Z', 'updatedAt': '2025-01-21T11:07:16.655Z', '__v': 0}}",
    "statusTrace" : "self = <test_task_management.TestTaskManagement object at 0x7f8367838e10>\n\n    @pytest.mark.order(31)\n    @allure.title(\"T31: Update an existing task with an empty title.\")\n    def test_update_task_with_empty_title(self):\n        user = self.api_user_auth.create_user()\n        task = self.api_task.create_task(Token=user.data.accessToken)\n>       self.api_task.update_task_with_empty_title(Token=user.data.accessToken, task_id=task.id)\n\ntests/test_task_management.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices/Task/api_task.py:136: in update_task_with_empty_title\n    self.assert_status(response, 400)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.Task.api_task.TaskAPI object at 0x7f83662b4650>\nresponse = <Response [200]>, expected_status = 400\n\n    def assert_status(self, response, expected_status):\n>       assert response.status_code == expected_status, \\\n            (f\"Expected status code {expected_status}, but got {response.status_code}. Response: {response.json()}\")\nE       AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678f7fe46eb12444f2b46abe', 'title': '', 'start': '01:16:27', 'end': '07:56:33', 'priority': 'medium', 'category': 'in-progress', 'owner': '678f7fe36eb12444f2b46aba', 'date': '2025-01-10T00:00:00.000Z', 'createdAt': '2025-01-21T11:07:16.252Z', 'updatedAt': '2025-01-21T11:07:16.655Z', '__v': 0}}\n\nutils/helper.py:13: AssertionError",
    "steps" : [ {
      "name" : "Create a new user.",
      "time" : {
        "start" : 1737457635401,
        "stop" : 1737457635931,
        "duration" : 530
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5e4323cb5545be9c",
        "name" : "API Response",
        "source" : "5e4323cb5545be9c.json",
        "type" : "application/json",
        "size" : 516
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Create a new task.",
      "time" : {
        "start" : 1737457635931,
        "stop" : 1737457636335,
        "duration" : 404
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5730d36214a54059",
        "name" : "API Response",
        "source" : "5730d36214a54059.json",
        "type" : "application/json",
        "size" : 356
      } ],
      "parameters" : [ {
        "name" : "Token",
        "value" : "'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OGY3ZmUzNmViMTI0NDRmMmI0NmFiYSIsImlhdCI6MTczNzQ1NzYzNSwiZXhwIjoxNzM3NDYxMjM1fQ.4jmG_B0H-y8nDrI51Kp9CMBZ0YdZAnEEZnJVnj3abUs'"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Update an existing task with an empty title.",
      "time" : {
        "start" : 1737457636335,
        "stop" : 1737457636738,
        "duration" : 403
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678f7fe46eb12444f2b46abe', 'title': '', 'start': '01:16:27', 'end': '07:56:33', 'priority': 'medium', 'category': 'in-progress', 'owner': '678f7fe36eb12444f2b46aba', 'date': '2025-01-10T00:00:00.000Z', 'createdAt': '2025-01-21T11:07:16.252Z', 'updatedAt': '2025-01-21T11:07:16.655Z', '__v': 0}}\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/services/Task/api_task.py\", line 136, in update_task_with_empty_title\n    self.assert_status(response, 400)\n  File \"/usr/workspace/utils/helper.py\", line 13, in assert_status\n    assert response.status_code == expected_status, \\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "Token",
        "value" : "'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3OGY3ZmUzNmViMTI0NDRmMmI0NmFiYSIsImlhdCI6MTczNzQ1NzYzNSwiZXhwIjoxNzM3NDYxMjM1fQ.4jmG_B0H-y8nDrI51Kp9CMBZ0YdZAnEEZnJVnj3abUs'"
      }, {
        "name" : "task_id",
        "value" : "'678f7fe46eb12444f2b46abe'"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestTaskManagement::0",
    "time" : {
      "start" : 1737457636745,
      "stop" : 1737457636745,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Task Management"
  }, {
    "name" : "tag",
    "value" : "order(31)"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_task_management"
  }, {
    "name" : "subSuite",
    "value" : "TestTaskManagement"
  }, {
    "name" : "host",
    "value" : "1f5fb87e8191"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_task_management"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "7cea9747616a52b0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e577e6eb12444f2b469ed', 'title': '', 'start': '19:46:07', 'end': '11:42:49', 'priority': 'high', 'category': 'to-do', 'owner': '678e577e6eb12444f2b469e9', 'date': '2025-01-08T00:00:00.000Z', 'createdAt': '2025-01-20T14:02:38.867Z', 'updatedAt': '2025-01-20T14:02:39.224Z', '__v': 0}}",
        "time" : {
          "start" : 1737381758098,
          "stop" : 1737381759303,
          "duration" : 1205
        }
      }, {
        "uid" : "60b80421b085521b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e4cb86eb12444f2b4691c', 'title': '', 'start': '10:15:59', 'end': '16:28:35', 'priority': 'medium', 'category': 'to-do', 'owner': '678e4cb76eb12444f2b46918', 'date': '2025-01-13T00:00:00.000Z', 'createdAt': '2025-01-20T13:16:40.352Z', 'updatedAt': '2025-01-20T13:16:40.843Z', '__v': 0}}",
        "time" : {
          "start" : 1737378999319,
          "stop" : 1737379000940,
          "duration" : 1621
        }
      }, {
        "uid" : "b2d53ec2fa0c7110",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expected status code 400, but got 200. Response: {'status': 'success', 'task': {'_id': '678e49fb6eb12444f2b46848', 'title': '', 'start': '05:56:39', 'end': '08:19:35', 'priority': 'medium', 'category': 'done', 'owner': '678e49fb6eb12444f2b46844', 'date': '2025-01-11T00:00:00.000Z', 'createdAt': '2025-01-20T13:04:59.683Z', 'updatedAt': '2025-01-20T13:04:59.868Z', '__v': 0}}",
        "time" : {
          "start" : 1737378298904,
          "stop" : 1737378299596,
          "duration" : 692
        }
      } ]
    },
    "tags" : [ "order(31)" ]
  },
  "source" : "b2574d954882fbe3.json",
  "parameterValues" : [ ]
}